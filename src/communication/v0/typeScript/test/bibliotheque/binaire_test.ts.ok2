import * as chai from 'chai';
import * as mocha from 'mocha';

import { binaire, representerMot, Mot, Alphabet } from "../../bibliotheque/binaire";


describe('fonction binaire', () => {
    let oracle = [Alphabet.ZERO];
    let arg = 0;
    let r = binaire(arg);
    it('renvoie ' + r + ' pour ' + arg, () => {
        chai.expect(r[0]).to.equal(oracle[0]);
        chai.expect(r.length).to.equal(oracle.length);
    });
});

describe('fonction binaire', () => {
    let oracle = [Alphabet.UN];
    let arg = 1;
    let r = binaire(arg);
    it('renvoie ' + r + ' pour ' + arg, () => {
        chai.expect(r[0]).to.equal(oracle[0]);
        chai.expect(r.length).to.equal(oracle.length);
    });
});

describe('fonction binaire', () => {
    let oracle = [Alphabet.UN, Alphabet.ZERO];
    let arg = 2;
    let r = binaire(arg);
    it('renvoie ' + r + ' pour ' + arg, () => {
        chai.expect(r[0]).to.equal(oracle[0]);
        chai.expect(r[1]).to.equal(oracle[1]);
        chai.expect(r.length).to.equal(oracle.length);
    });
});

describe('fonction binaire', () => {
    let oracle = [Alphabet.UN, Alphabet.UN];
    let arg = 3;
    let r = binaire(arg);
    it('renvoie ' + r + ' pour ' + arg, () => {
        chai.expect(r[0]).to.equal(oracle[0]);
        chai.expect(r[1]).to.equal(oracle[1]);
        chai.expect(r.length).to.equal(oracle.length);
    });
});


