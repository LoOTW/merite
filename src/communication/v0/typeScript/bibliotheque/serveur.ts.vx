// obsolète - cf. serveurConnexions

// Un module commençant par un import
import * as http from 'http';
import * as websocket from 'websocket';
import * as url from 'url';

import { FormatMessage, Message, FormatSommet } from "./communication";

export function adresse(u : url.Url) : string {
    return u.href; // TODO incomplet avec 127.0.0.1 réolu en merite graĉe à /etc/hosts
}

export class LienWebSocket<T extends FormatMessage, EM extends string> {
    private _connexion: websocket.connection;
    private _url: url.Url;

    constructor(r: websocket.request) {
        this._connexion = r.accept('echo-protocol', r.origin);
        this._url = r.resourceURL;
        /* TODO
        console.log("url socket : " + r.resource);
        console.log("url socket : " + r.httpRequest.url);
        console.log("- auth: " + this._url.auth);
        console.log("- hostname: " + this._url.hostname);
        console.log("- port: " + this._url.port);
        console.log("- protocol : " + this._url.protocol);
        console.log("- search: " + this._url.search);
        console.log("- href: " + this._url.href);
        console.log("- path: " + this._url.path);
        console.log("- pathname: " + this._url.pathname);
        */
    }
    url(): url.Url {
        return this._url;
    }
    enregistrerTraitementMessages(traitementMessages: (l: LienWebSocket<T>, m: T) => void): void {
        let ceLien = this;
        this._connexion.on('message', (message: websocket.IMessage) => {
            console.log("* Réception par Web socket d'un message");
            console.log("- adresse : " + adresse(ceLien.url()));
            console.log("- message brut : " + message.utf8Data.toString());
            let msg: T = JSON.parse(message.utf8Data.toString());
            console.log("- parsing : " + JSON.stringify(msg));
            traitementMessages(ceLien, msg);
        });
        console.log("- Enregistrement du traitement des messages.")
    }
    enregistrerTraitementFermeture(traitementFermeture: (l: LienWebSocket<T>) => void): void {
        let ceLien = this;
        this._connexion.on('close', (raison: number, description: string) => {
            traitementFermeture(ceLien);
            console.log("- Déconnexion du client utilisant l'adresse " + adresse(this.url()) + ".");
            console.log("- raison : " + raison + " ; description : " + description);
        });
        console.log("- Enregistrement du traitement de la fermeture de la connexion par Web socket.")
    }

    envoyerAuClientDestinataire(m: Message<T, EM>) {
        console.log("- Envoi au client utilisant l'adresse " + adresse(this.url()));
        console.log("  - du message brut : " + m.brut());
        console.log("  - du message net : " + m.net());
        this._connexion.sendUTF(m.brut());
    }
}

export interface FormatSommetConnecte<T extends FormatMessage> extends FormatSommet {
    lien: LienWebSocket<T>;
}

export class ServeurLiensWebSocket<T extends FormatMessage> {
    private port: number;
    private hote: string;
    private traiterMessages: (l: LienWebSocket<T>, m: T) => void;
    private traiterConnexion: (l: LienWebSocket<T>) => void;
    private traiterFermeture: (l: LienWebSocket<T>) => void;

    constructor(port: number, hote: string) {
        this.port = port;
        this.hote = hote;
    }

    enregistrerTraitementConnexion(traitementConnexion: (l: LienWebSocket<T>) => void): void {
        this.traiterConnexion = traitementConnexion;
    }

    enregistrerTraitementFermeture(traitementFermeture: (l: LienWebSocket<T>) => void): void {
        this.traiterFermeture = traitementFermeture;
    }


    enregistrerTraitementMessages(traitementMessages: (l: LienWebSocket<T>, m: T) => void): void {
        this.traiterMessages = traitementMessages;
    }

    demarrer(): void {
        let serveurHTTP: http.Server = http.createServer(function (requete, reponse) { });
        let ceServeur = this;
        let p = this.port;
        let h = this.hote;
        serveurHTTP.listen(p, h, function () {
            console.log("* " + (new Date()) + " - Le serveur écoute le port " + p + " de l'hôte " + h + ".");
        });
        let serveurWS = new websocket.server({
            httpServer: serveurHTTP
        });
        serveurWS.on('request', function (r: websocket.request) {
            let l = new LienWebSocket<T>(r);
        
            ceServeur.traiterConnexion(l);
            // Applique le traitement après conversion au bon format de chaque message
            l.enregistrerTraitementMessages(ceServeur.traiterMessages);

            // Réagit à la fermeture de la connexion
            l.enregistrerTraitementFermeture(ceServeur.traiterFermeture);
        });

    }

}

