* Recommandations concernant Javascript

- Utiliser ECMAscript 2015.

* Gestion des modules

- côté serveur : utiliser l'API de Node
- côté client : utiliser l'API du navigateur

cf. https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications

* Format des données : JSON

** Messages

#+BEGIN_SRC js
{
 emetteur : String,
 identifiant : String,
 destinataire : String
 type : String,
 contenu : String,
} 
#+END_SRC

* Protocole de communication

Côté client
- Le client initie une WebSocket avec le serveur.
- Le client envoie son identité (pseudo).
- Le client envoie un message au format JSON spécifié.
- Le client reçoit un message au format JSON spécifié.

Côté serveur
- Le serveur répond à la requête de création de WebSocket.
- Le serveur reçoit l'identité d'un client.
- Le serveur reçoit un message au format JSON spécifié.
- Le serveur envoie un message au format JSON spécifié.

** Formalisation

*** données

- message
  - emetteur
  - destinataire

*** Serveur

Canaux
- initier(rep)
- serveur_p
- canal(TYPE, msg) : canal bi-directionnel

Etat du serveur
- Port(p) : port utilisé pour la prochaine communication
- C(i) : compteur des clients
- Nom(i, n) : nom n du client i
- Description(i, n, canal) : ième client décrit par n et communiquant
  par canal 
- Autorisation(i, j) : communication de i vers j autorisée

#+BEGIN_SRC js
- initier(rep) & Port(p) -> rep(serveur_p) & Port(p+1)

- serveur_p(canal) & C(i) & Nom(i, n) 
  ->
  canal(NOM, n) 
  & C(i+1) & Nom(i, n) & Description(i, n, canal)

- canal(ENVOI, msg) & Description(i, msg.emetteur, canal) 
  ->  
  Transit(i, msg, canal)
- canal(msg) & ¬Description(i, msg.emetteur, canal) 
  ->  
  canal(ERREUR, msg.emetteur " non associé à " canal)

- Transit(i, msg, canal) 
  & Description(j, msg.destinataire, canalDest) & Autorisation(i, j)
  ->
  canal(OK, msg) & canalDest(TRANSIT, msg) 
  & Description(j, msg.destinataire, canalDest) & Autorisation(i, j)
- Transit(i, msg, canal) 
  & ¬Description(j, msg.destinataire, canalDest)
  ->
  canal(ERREUR, msg.destinataire " inconnu") 
- Transit(i, msg, canal) 
  & Description(j, msg.destinataire, canalDest) & ¬Autorisation(i, j)
  ->
  canal(ERREUR, "Interdit vers " msg.destinataire) 
 #+END_SRC


* Organisation

Trois axes pour organiser le code
- fonctionnalités
  - communication
- serveur / client
- modèle (données) / vue (html)

Cf. Express qui donne une architecture type.
- http://expressjs.com/en/starter/generator.html


* Travail à faire

** TODO  Réaliser les fonctions de communication. BB
   DEADLINE: <2017-06-29 jeu.>

** TODO Définir les messages. HG + BB
   DEADLINE: <2017-06-29 jeu.>
   
** TODO Spécifier le jeu 1. HG
   DEADLINE: <2017-06-29 jeu.>
   

